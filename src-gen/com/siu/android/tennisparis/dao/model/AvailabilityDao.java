package com.siu.android.tennisparis.dao.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.siu.android.tennisparis.dao.model.Availability;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table AVAILABILITY.
*/
public class AvailabilityDao extends AbstractDao<Availability, Long> {

    public static final String TABLENAME = "AVAILABILITY";

    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Day = new Property(1, java.util.Date.class, "day", false, "DAY");
        public final static Property Hour = new Property(2, Integer.class, "hour", false, "HOUR");
        public final static Property Ground = new Property(3, String.class, "ground", false, "GROUND");
        public final static Property WebserviceTennisId = new Property(4, Long.class, "webserviceTennisId", false, "WEBSERVICE_TENNIS_ID");
    };


    public AvailabilityDao(DaoConfig config) {
        super(config);
    }
    
    public AvailabilityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'AVAILABILITY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DAY' INTEGER," + // 1: day
                "'HOUR' INTEGER," + // 2: hour
                "'GROUND' TEXT," + // 3: ground
                "'WEBSERVICE_TENNIS_ID' INTEGER);"; // 4: webserviceTennisId
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'AVAILABILITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Availability entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date day = entity.getDay();
        if (day != null) {
            stmt.bindLong(2, day.getTime());
        }
 
        Integer hour = entity.getHour();
        if (hour != null) {
            stmt.bindLong(3, hour);
        }
 
        String ground = entity.getGround();
        if (ground != null) {
            stmt.bindString(4, ground);
        }
 
        Long webserviceTennisId = entity.getWebserviceTennisId();
        if (webserviceTennisId != null) {
            stmt.bindLong(5, webserviceTennisId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Availability readEntity(Cursor cursor, int offset) {
        Availability entity = new Availability( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // day
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // hour
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ground
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // webserviceTennisId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Availability entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDay(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setHour(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setGround(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWebserviceTennisId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected Long updateKeyAfterInsert(Availability entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Availability entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
